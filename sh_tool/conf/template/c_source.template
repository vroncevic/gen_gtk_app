"/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*-  */"
"/*"
" * ${PN}.c"
" * Copyright (C) 2021 ${AN} <${AE}>"
" *"
" * ${PN} is free software: you can redistribute it and/or modify it"
" * under the terms of the GNU General Public License as published by the"
" * Free Software Foundation, either version 3 of the License, or"
" * (at your option) any later version."
" *"
" * ${PN} is distributed in the hope that it will be useful, but"
" * WITHOUT ANY WARRANTY; without even the implied warranty of"
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
" * See the GNU General Public License for more details."
" *"
" * You should have received a copy of the GNU General Public License along"
" * with this program. If not, see <http://www.gnu.org/licenses/>."
" */"
"#include \\\"${PN}.h\\\""

"/* For testing propose use the local (not installed) ui file */"
"/* #define UI_FILE PACKAGE_DATA_DIR\\\"/ui/${PN}.ui\\\" */"
"#define UI_FILE \\\"../share/${LPN}/ui/${PN}.ui\\\""
"#define TOP_WINDOW \\\"window\\\""

"G_DEFINE_TYPE(${PN}, ${PN}, GTK_TYPE_APPLICATION);"

"struct _${PN}Private {"
${T}
"};"

"/* Create a new window loading a file */"
"static void ${LPN}_new_window(GApplication *app, GFile *file) {"
${T}"GtkWidget *window;"
${T}"GtkBuilder *builder;"
${T}"GError* error = NULL;"
${T}"${PN}Private *priv = ${UPN}_APPLICATION(app)->priv;"
${T}"/* Load UI from file */"
${T}"builder = gtk_builder_new();"
${T}"if(!gtk_builder_add_from_file(builder, UI_FILE, &error)) {"
${T}${T}"g_critical("
${T}${T}${T}"\\\"Couldn't load builder file: %s\\\", error->message"
${T}${T}");"
${T}${T}"g_error_free(error);"
${T}"}"
${T}"/* Auto-connect signal handlers */"
${T}"gtk_builder_connect_signals(builder, app);"
${T}"/* Get the window object from the ui file */"
${T}"window = GTK_WIDGET(gtk_builder_get_object(builder, TOP_WINDOW));"
${T}"if(!window) {"
${T}${T}"g_critical("
${T}${T}${T}"\\\"Widget %s is missing - file %s.\\\", TOP_WINDOW, UI_FILE"
${T}${T}");"
${T}"}"
${T}"g_object_unref(builder);"
${T}"gtk_window_set_application(GTK_WINDOW(window), GTK_APPLICATION(app));"
${T}"if(file != NULL) {"
${T}${T}"/* TODO: Add code here to open the file in the new window */"
${T}"}"
${T}"gtk_widget_show_all(GTK_WIDGET(window));"
"}"

"/* GApplication implementation */"
"static void ${LPN}_activate(GApplication *application) {"
${T}"${LPN}_new_window(application, NULL);"
"}"

"static void ${LPN}_open("
${T}"GApplication *application, GFile **files,"
${T}"gint n_files, const gchar *hint) {"
${T}"gint i;"
${T}"for(i = 0; i < n_files; i++) {"
${T}${T}"${LPN}_new_window(application, files[i]);"
${T}"}"
"}"

"static void ${LPN}_init($PN *object) {"
${T}"object->priv = G_TYPE_INSTANCE_GET_PRIVATE("
${T}${T}"object, ${UPN}_TYPE_APPLICATION, ${PN}Private"
${T}");"
"}"

"static void ${PN}_finalize(GObject *object) {"
${T}"G_OBJECT_CLASS(${PN}_parent_class)->finalize(object);"
"}"

"static void ${PN}_class_init(${PN}Class *klass) {"
${T}"G_APPLICATION_CLASS (klass)->activate = ${LPN}_activate;"
${T}"G_APPLICATION_CLASS (klass)->open = ${LPN}_open;"
${T}"g_type_class_add_private(klass, sizeof(${PN}Private));"
${T}"G_OBJECT_CLASS(klass)->finalize = ${LPN}_finalize;"
"}"

"${PN} * ${LPN}_new(void) {"
${T}"return g_object_new(${LPN}_get_type(),"
${T}${T}"\\\"application-id\\\", \\\"org.gnome.${PN}\\\","
${T}${T}"\\\"flags\\\", G_APPLICATION_HANDLES_OPEN,"
${T}${T}"NULL"
${T}");"
"}"

